<?php

/* Copyright (c) 1998-2009 ILIAS open source, Extended GPL, see https://github.com/ILIAS-eLearning/ILIAS/tree/trunk/docs/LICENSE */

require_once __DIR__ . "/../vendor/autoload.php";

use srag\Plugins\FlashcardQuestions\Object\ObjSettingsFormGUI;
use srag\DIC\DICTrait;

/**
 * Class ilObjFlashcardQuestionsGUI
 *
 * Generated by srag\PluginGenerator v0.7.2
 *
 * @author            studer + raimann ag - Team Custom 1 <support-custom1@studer-raimann.ch>
 * @author            studer + raimann ag - Team Custom 1 <support-custom1@studer-raimann.ch>
 *
 * @ilCtrl_isCalledBy ilObjFlashcardQuestionsGUI: ilRepositoryGUI
 * @ilCtrl_isCalledBy ilObjFlashcardQuestionsGUI: ilObjPluginDispatchGUI
 * @ilCtrl_isCalledBy ilObjFlashcardQuestionsGUI: ilAdministrationGUI
 * @ilCtrl_Calls      ilObjFlashcardQuestionsGUI: ilPermissionGUI
 * @ilCtrl_Calls      ilObjFlashcardQuestionsGUI: ilInfoScreenGUI
 * @ilCtrl_Calls      ilObjFlashcardQuestionsGUI: ilObjectCopyGUI
 * @ilCtrl_Calls      ilObjFlashcardQuestionsGUI: ilCommonActionDispatcherGUI
 */
class ilObjFlashcardQuestionsGUI extends ilObjectPluginGUI {

	use DICTrait;
	const PLUGIN_CLASS_NAME = ilFlashcardQuestionsPlugin::class;
	const CMD_MANAGE_CONTENTS = "manageContents";
	const CMD_PERMISSIONS = "perm";
	const CMD_SETTINGS = "settings";
	const CMD_SETTINGS_STORE = "settingsStore";
	const CMD_SHOW_CONTENTS = "showContents";
	const TAB_CONTENTS = "contents";
	const TAB_PERMISSIONS = "perm_settings";
	const TAB_SETTINGS = "settings";
	const TAB_SHOW_CONTENTS = "showContent";
	const LANG_MODULE_OBJECT = "object";
	const LANG_MODULE_SETTINGS = "settings";
	/**
	 * Fix autocomplete (Defined in parent)
	 *
	 * @var ilObjFlashcardQuestions
	 */
	var $object;


	/**
	 *
	 */
	protected function afterConstructor()/*: void*/ {

	}


	/**
	 * @return string
	 */
	public final function getType(): string {
		return ilFlashcardQuestionsPlugin::PLUGIN_ID;
	}


	/**
	 * @param string $cmd
	 */
	public function performCommand(string $cmd)/*: void*/ {
		$next_class = self::dic()->ctrl()->getNextClass($this);

		switch (strtolower($next_class)) {
			default:
				switch ($cmd) {
					case self::CMD_SHOW_CONTENTS:
						// Read commands
						if (!ilObjFlashcardQuestionsAccess::hasReadAccess()) {
							ilObjFlashcardQuestionsAccess::redirectNonAccess(ilRepositoryGUI::class);
						}

						$this->{$cmd}();
						break;

					case self::CMD_MANAGE_CONTENTS:
					case self::CMD_SETTINGS:
					case self::CMD_SETTINGS_STORE:
						// Write commands
						if (!ilObjFlashcardQuestionsAccess::hasWriteAccess()) {
							ilObjFlashcardQuestionsAccess::redirectNonAccess($this);
						}

						$this->{$cmd}();
						break;

					default:
						// Unknown command
						ilObjFlashcardQuestionsAccess::redirectNonAccess(ilRepositoryGUI::class);
						break;
				}
				break;
		}
	}


	/**
	 * @param string $html
	 */
	protected function show(string $html)/*: void*/ {
		if (!self::dic()->ctrl()->isAsynch()) {
			self::dic()->template()->setTitle($this->object->getTitle());

			self::dic()->template()->setDescription($this->object->getDescription());

			if (!$this->object->isOnline()) {
				self::dic()->template()->setAlertProperties([
					[
						"alert" => true,
						"property" => self::plugin()->translate("status", self::LANG_MODULE_OBJECT),
						"value" => self::plugin()->translate("offline", self::LANG_MODULE_OBJECT)
					]
				]);
			}
		}

		self::plugin()->output($html);
	}


	/**
	 * @param string $a_new_type
	 *
	 * @return ilPropertyFormGUI
	 */
	public function initCreateForm(/*string*/
		$a_new_type): ilPropertyFormGUI {
		$form = parent::initCreateForm($a_new_type);

		return $form;
	}


	/**
	 * @param ilObjFlashcardQuestions $a_new_object
	 */
	public function afterSave(/*ilObjFlashcardQuestions*/
		ilObject $a_new_object)/*: void*/ {
		parent::afterSave($a_new_object);
	}


	/**
	 *
	 */
	protected function manageContents()/*: void*/ {
		self::dic()->tabs()->activateTab(self::TAB_CONTENTS);

		// TODO: Implement manageContents
		$this->show("");
	}


	/**
	 *
	 */
	protected function showContents()/*: void*/ {
		self::dic()->tabs()->activateTab(self::TAB_SHOW_CONTENTS);

		// TODO: Implement showContents
		$this->show("");
	}


	/**
	 * @return ObjSettingsFormGUI
	 */
	protected function getSettingsForm(): ObjSettingsFormGUI {
		$form = new ObjSettingsFormGUI($this);

		return $form;
	}


	/**
	 *
	 */
	protected function settings()/*: void*/ {
		self::dic()->tabs()->activateTab(self::TAB_SETTINGS);

		$form = $this->getSettingsForm();

		self::plugin()->output($form);
	}


	/**
	 *
	 */
	protected function settingsStore()/*: void*/ {
		self::dic()->tabs()->activateTab(self::TAB_SETTINGS);

		$form = $this->getSettingsForm();

		$form->setValuesByPost();

		if (!$form->checkInput()) {
			self::plugin()->output($form);

			return;
		}

		$form->updateSettings();

		ilUtil::sendSuccess(self::plugin()->translate("saved", self::LANG_MODULE_SETTINGS), true);

		self::plugin()->output($form);
	}


	/**
	 *
	 */
	protected function setTabs()/*: void*/ {
		self::dic()->tabs()->addTab(self::TAB_SHOW_CONTENTS, self::plugin()->translate("show_contents", self::LANG_MODULE_OBJECT), self::dic()->ctrl()
			->getLinkTarget($this, self::CMD_SHOW_CONTENTS));

		if (ilObjFlashcardQuestionsAccess::hasWriteAccess()) {
			self::dic()->tabs()->addTab(self::TAB_CONTENTS, self::plugin()->translate("contents", self::LANG_MODULE_OBJECT), self::dic()->ctrl()
				->getLinkTarget($this, self::CMD_MANAGE_CONTENTS));

			self::dic()->tabs()->addTab(self::TAB_SETTINGS, self::plugin()->translate("settings", self::LANG_MODULE_SETTINGS), self::dic()->ctrl()
				->getLinkTarget($this, self::CMD_SETTINGS));
		}

		if (ilObjFlashcardQuestionsAccess::hasEditPermissionAccess()) {
			self::dic()->tabs()->addTab(self::TAB_PERMISSIONS, self::plugin()->translate(self::TAB_PERMISSIONS, "", [], false), self::dic()->ctrl()
				->getLinkTargetByClass([
					self::class,
					ilPermissionGUI::class,
				], self::CMD_PERMISSIONS));
		}

		self::dic()->tabs()->manual_activation = true; // Show all tabs as links when no activation
	}


	/**
	 * @return string
	 */
	public static function getStartCmd(): string {
		if (ilObjFlashcardQuestionsAccess::hasWriteAccess()) {
			return self::CMD_MANAGE_CONTENTS;
		} else {
			return self::CMD_SHOW_CONTENTS;
		}
	}


	/**
	 * @return string
	 */
	public function getAfterCreationCmd(): string {
		return self::getStartCmd();
	}


	/**
	 * @return string
	 */
	public function getStandardCmd(): string {
		return self::getStartCmd();
	}
}
