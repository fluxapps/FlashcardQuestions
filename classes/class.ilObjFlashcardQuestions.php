<?php

/* Copyright (c) 1998-2009 ILIAS open source, Extended GPL, see https://github.com/ILIAS-eLearning/ILIAS/tree/trunk/docs/LICENSE */

require_once __DIR__ . "/../vendor/autoload.php";

use srag\DIC\FlashcardQuestions\DICTrait;
use srag\Plugins\FlashcardQuestions\Object\Obj;
use srag\Plugins\FlashcardQuestions\Question\xfcqQuestion;

/**
 * Class ilObjFlashcardQuestions
 *
 * Generated by srag\PluginGenerator v0.7.2
 *
 * @author studer + raimann ag - Team Custom 1 <support-custom1@studer-raimann.ch>
 * @author studer + raimann ag - Team Custom 1 <support-custom1@studer-raimann.ch>
 */
class ilObjFlashcardQuestions extends ilObjectPlugin {

	use DICTrait;
	const PLUGIN_CLASS_NAME = ilFlashcardQuestionsPlugin::class;
	/**
	 * @var Obj
	 */
	protected $object;


	/**
	 * ilObjFlashcardQuestions constructor
	 *
	 * @param int $a_ref_id
	 */
	public function __construct($a_ref_id = 0) {
		parent::__construct($a_ref_id);
	}


	/**
	 *
	 */
	public final function initType()/*: void*/ {
		$this->setType(ilFlashcardQuestionsPlugin::PLUGIN_ID);
	}


	/**
	 * @return array
	 */
	public function getTaxonomyIds() {
		return ilObjTaxonomy::getUsageOfObject($this->id);
	}


	/**
	 *
	 */
	public function doCreate()/*: void*/ {
        // create object settings
        $this->object = new Obj();
        $this->object->setObjId($this->id);
		$this->object->store();
	}


	/**
	 *
	 */
	public function doRead()/*: void*/ {
		$this->object = Obj::getObjectById(intval($this->id));
	}


	/**
	 *
	 */
	public function doUpdate()/*: void*/ {
		$this->object->store();
	}


	/**
	 *
	 */
	public function beforeDelete()/*: void*/ {
		if ($this->object !== NULL) {
			$this->object->delete();
		}

        foreach ($this->getTaxonomyIds() as $tax_id) {
            $ilObjTaxonomy = new ilObjTaxonomy($tax_id);
            $ilObjTaxonomy->delete();
        }

        foreach ($this->getQuestions() as $xfcqQuestion) {
            /** @var $xfcqQuestion xfcqQuestion */
            $xfcqQuestion->delete();
        }
	}


	/**
	 * @param      $new_obj
	 * @param      $a_target_id
	 * @param null $a_copy_id
	 *
	 * @throws arException
	 */
	protected function doCloneObject(/*ilObjFlashcardQuestions*/
		$new_obj, /*int*/
		$a_target_id, /*?int*/
		$a_copy_id = NULL)/*: void*/ {
		$new_obj->object = $this->object->copy();

		$new_obj->object->setObjId($new_obj->id);

		$new_obj->object->store();
	}


	/**
	 * @return bool
	 */
	public function isOnline() {
		return $this->object->isOnline();
	}


	/**
	 * @param bool $is_online
	 */
	public function setOnline($is_online = true)/*: void*/ {
		$this->object->setOnline($is_online);
	}

    /**
     * @param $report_lvl_1 int
     */
    public function setReportLvl1($report_lvl_1) {
        $this->object->setReportLvl1($report_lvl_1);
	}

    /**
     * @return int
     */
    public function getReportLvl1() {
        return $this->object->getReportLvl1();
	}

    /**
     * @param $report_lvl_2 int
     */
    public function setReportLvl2($report_lvl_2) {
        $this->object->setReportLvl2($report_lvl_2);
	}

    /**
     * @return int
     */
    public function getReportLvl2() {
        return $this->object->getReportLvl2();
    }

    /**
     * @return xfcqQuestion[]
     */
    public function getQuestions()/*: array*/ {
        return xfcqQuestion::where(['obj_id' => $this->id])->get();
	}

    /**
     * Return the profession (category title of the category where the flashcard questions object lives in the tree)
     *
     * @return string
     */
    public function getProfessionTitle()
    {
        $parent = self::dic()->tree()->getParentNodeData($this->getRefId());
        return $parent['title'];
    }

	protected function beforeCloneObject() {
		ilUtil::sendFailure(self::plugin()->translate('copy_not_possible'), true);
		self::dic()->ctrl()->setParameterByClass(ilObjFlashcardQuestionsGUI::class,'ref_id',$this->getRefId());
		self::dic()->ctrl()->redirectByClass([ilUIPluginRouterGUI::class,ilObjPluginDispatchGUI::class,ilObjFlashcardQuestionsGUI::class], ilObjFlashcardQuestionsGUI::CMD_SHOW_CONTENTS);
	}
}
