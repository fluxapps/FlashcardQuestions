<?php

/* Copyright (c) 1998-2009 ILIAS open source, Extended GPL, see https://github.com/ILIAS-eLearning/ILIAS/tree/trunk/docs/LICENSE */

require_once __DIR__ . "/../vendor/autoload.php";

use srag\Plugins\FlashcardQuestions\Object\Obj;
use srag\DIC\DICTrait;

/**
 * Class ilObjFlashcardQuestions
 *
 * Generated by srag\PluginGenerator v0.7.2
 *
 * @author studer + raimann ag - Team Custom 1 <support-custom1@studer-raimann.ch>
 * @author studer + raimann ag - Team Custom 1 <support-custom1@studer-raimann.ch>
 */
class ilObjFlashcardQuestions extends ilObjectPlugin {

	use DICTrait;
	const PLUGIN_CLASS_NAME = ilFlashcardQuestionsPlugin::class;
	/**
	 * @var Obj
	 */
	protected $object;


	/**
	 * ilObjFlashcardQuestions constructor
	 *
	 * @param int $a_ref_id
	 */
	public function __construct($a_ref_id = 0) {
		parent::__construct($a_ref_id);
	}


	/**
	 *
	 */
	public final function initType()/*: void*/ {
		$this->setType(ilFlashcardQuestionsPlugin::PLUGIN_ID);
	}


	/**
	 *
	 */
	public function doCreate()/*: void*/ {
        // create taxonomy
	    $ilObjTaxonomy = new ilObjTaxonomy();
        $ilObjTaxonomy->setTitle("Taxonomie");
        $ilObjTaxonomy->create();
        ilObjTaxonomy::saveUsage($ilObjTaxonomy->getId(), $this->id);

        // create object settings
        $this->object = new Obj();
        $this->object->setObjId($this->id);
		$this->object->setTaxId($ilObjTaxonomy->getId());
		$this->object->store();
	}


	/**
	 *
	 */
	public function doRead()/*: void*/ {
		$this->object = Obj::getObjectById(intval($this->id));
	}


	/**
	 *
	 */
	public function doUpdate()/*: void*/ {
		$this->object->store();
	}


	/**
	 *
	 */
	public function doDelete()/*: void*/ {
		if ($this->object !== NULL) {
			$this->object->delete();
		}
		$usage = ilObjTaxonomy::getUsageOfObject($this->id);
		if (count($usage) == 1) {
            $ilObjTaxonomy = new ilObjTaxonomy(array_shift($usage));
            $ilObjTaxonomy->delete();
        }
	}


	/**
	 * @param ilObjFlashcardQuestions $new_obj
	 * @param int                  $a_target_id
	 * @param int                  $a_copy_id
	 */
	protected function doCloneObject(/*ilObjFlashcardQuestions*/
		$new_obj, /*int*/
		$a_target_id, /*?int*/
		$a_copy_id = NULL)/*: void*/ {
		$new_obj->object = $this->object->copy();

		$new_obj->object->setObjId($new_obj->id);

		$new_obj->object->store();
	}


	/**
	 * @return bool
	 */
	public function isOnline(): bool {
		return $this->object->isOnline();
	}


	/**
	 * @param bool $is_online
	 */
	public function setOnline(bool $is_online = true)/*: void*/ {
		$this->object->setOnline($is_online);
	}
}
